#!/bin/bash
# devenv - Centralized configuration management CLI
# Usage: devenv <command> [options]

set -e

# Resolve the real script directory (follow symlinks)
SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SOURCE" ]; do
  SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$SCRIPT_DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"

PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
DEVENV_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_FILE="$DEVENV_DIR/config.yaml"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Utility functions
log_info() { echo -e "${BLUE}‚Ñπ $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}" >&2; }

# Command: pull [target]
cmd_pull() {
    local target="${1:-all}"
    log_info "Pulling configurations from central repositories..."
    "$SCRIPT_DIR/sync-pull.sh" "$target"
}

# Command: push [target]
cmd_push() {
    local target="${1:-all}"
    log_info "Pushing changes to central repositories..."
    "$SCRIPT_DIR/sync-push.sh" "$target"
}

# Command: status
cmd_status() {
    log_info "Configuration sync status:"
    echo ""

    # Check if yq is available
    if ! command -v yq &> /dev/null; then
        log_error "yq is required but not installed. Install: https://github.com/mikefarah/yq"
        exit 1
    fi

    # Read sources from config.yaml
    for source_name in $(yq eval '.sources | keys | .[]' "$CONFIG_FILE"); do
        REPO=$(yq eval ".sources.$source_name.repo" "$CONFIG_FILE")
        BRANCH=$(yq eval ".sources.$source_name.branch // \"main\"" "$CONFIG_FILE")
        TARGET=$(yq eval ".sources.$source_name.target" "$CONFIG_FILE")

        echo "üì¶ $source_name (synced from: $REPO)"
        echo "   Target: $TARGET"

        # Check if directory exists
        if [ ! -d "$PROJECT_ROOT/$TARGET" ]; then
            log_warning "Directory not found (run: devenv pull $source_name)"
            echo ""
            continue
        fi

        # Find last subtree pull commit hash from git history
        LAST_SUBTREE_COMMIT=$(git log --all --grep="git-subtree-dir: $TARGET" --pretty=format:"%H" 2>/dev/null | head -1)

        if [ -z "$LAST_SUBTREE_COMMIT" ]; then
            log_warning "No subtree history found. Directory may not be properly synced."
            echo ""
            continue
        fi

        # Extract the actual remote commit hash from the squashed commit message
        REMOTE_COMMIT=$(git log -1 "$LAST_SUBTREE_COMMIT" --pretty=format:"%s" | grep -oP "commit \K[a-f0-9]+" || echo "")

        if [ -z "$REMOTE_COMMIT" ]; then
            log_warning "Cannot determine remote commit hash"
            echo ""
            continue
        fi

        # Create temp directory for comparison
        TEMP_DIR=$(mktemp -d)
        trap "rm -rf $TEMP_DIR" EXIT

        # Clone remote repo (shallow)
        log_info "Checking remote repository..."
        if ! git clone --depth=50 -q "git@github.com:$REPO.git" "$TEMP_DIR/remote" 2>/dev/null; then
            log_warning "Failed to clone remote repository"
            rm -rf "$TEMP_DIR"
            echo ""
            continue
        fi

        cd "$TEMP_DIR/remote"

        # Check if we have the commit we need
        if ! git cat-file -e "$REMOTE_COMMIT" 2>/dev/null; then
            # Try fetching more history
            git fetch --depth=200 -q 2>/dev/null || true
        fi

        # Checkout the commit we last pulled
        if git cat-file -e "$REMOTE_COMMIT" 2>/dev/null; then
            git checkout -q "$REMOTE_COMMIT" 2>/dev/null
        else
            log_warning "Cannot find commit $REMOTE_COMMIT in remote repo"
            cd "$PROJECT_ROOT"
            rm -rf "$TEMP_DIR"
            echo ""
            continue
        fi

        # Compare local files with remote
        cd "$PROJECT_ROOT"
        LOCAL_CHANGES=$(diff -r -q "$PROJECT_ROOT/$TARGET" "$TEMP_DIR/remote" 2>/dev/null | grep -v "^Only in $TEMP_DIR/remote" | wc -l || echo "0")

        if [ "$LOCAL_CHANGES" -gt 0 ]; then
            echo "   Status: üìù Local modifications detected"
            diff -r -q "$PROJECT_ROOT/$TARGET" "$TEMP_DIR/remote" 2>/dev/null | grep -v "^Only in $TEMP_DIR/remote" | sed 's/^/     /' || true
        else
            log_success "No local changes"
        fi

        # Check for upstream changes
        cd "$TEMP_DIR/remote"
        git checkout -q "$BRANCH" 2>/dev/null
        REMOTE_HEAD=$(git rev-parse HEAD)
        REMOTE_COMMIT_FULL=$(git rev-parse "$REMOTE_COMMIT" 2>/dev/null || echo "$REMOTE_COMMIT")

        if [ "$REMOTE_HEAD" != "$REMOTE_COMMIT_FULL" ]; then
            echo "   Status: ‚¨ÜÔ∏è  Upstream changes available"
            echo "     Local:  $REMOTE_COMMIT_FULL"
            echo "     Remote: $REMOTE_HEAD"
            echo "     Run: devenv pull $source_name"
        fi

        cd "$PROJECT_ROOT"
        rm -rf "$TEMP_DIR"
        echo ""
    done
}

# Command: help
cmd_help() {
    cat <<EOF
üì¶ DevEnv - Centralized Configuration Management

Usage: devenv <command> [options]

Commands:
  pull [target]         Pull updates from central repos (default: all)
  push [target]         Push local changes to central repos (default: all)
  status                Show sync status
  help                  Show this help message

Targets: devcontainer, claude, continue, all (default)

Examples:
  devenv pull              # Pull all configs
  devenv pull claude       # Pull only .claude configs
  devenv push claude       # Push .claude changes
  devenv status            # Check sync status

Configuration:
  Edit .devenv/config.yaml to configure repos and variables
  Edit .devenv/variables.env for secrets (gitignored)

For more info: see Setup - 04 - GitHub Environment centralized configuration across projects.md
EOF
}

# Main CLI router
case "${1:-help}" in
    pull)
        shift
        cmd_pull "$@"
        ;;
    push)
        shift
        cmd_push "$@"
        ;;
    status)
        cmd_status
        ;;
    help|--help|-h)
        cmd_help
        ;;
    *)
        log_error "Unknown command: $1"
        echo "Run 'devenv help' for usage"
        exit 1
        ;;
esac
